<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<article id="libpaxos_cpp" last-revision="$Date: 2013/01/20 10:34:41 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>libpaxos-cpp 0.6.1</title>
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Leon</firstname> <surname>Mergen</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2012</year> <holder>Leon Mergen</holder>
    </copyright>
    <legalnotice id="libpaxos_cpp.legal">
      <para>
        Distributed under the 3-Clause BSD License. (See accompanying file COPYING
        or copy at <ulink url="http://opensource.org/licenses/BSD-3-Clause">http://opensource.org/licenses/BSD-3-Clause</ulink>)
      </para>
    </legalnotice>
  </articleinfo>
  <section id="libpaxos_cpp.getting_started">
    <title><link linkend="libpaxos_cpp.getting_started">Getting started</link></title>
    <bridgehead renderas="sect3" id="libpaxos_cpp.getting_started.h0">
      <phrase id="libpaxos_cpp.getting_started.getting_the_source"/><link linkend="libpaxos_cpp.getting_started.getting_the_source">Getting
      the source</link>
    </bridgehead>
    <bridgehead renderas="sect5" id="libpaxos_cpp.getting_started.h1">
      <phrase id="libpaxos_cpp.getting_started.prepackaged_distributions"/><link
      linkend="libpaxos_cpp.getting_started.prepackaged_distributions">Prepackaged
      distributions</link>
    </bridgehead>
    <para>
      You can get the latest prepackaged distribution online:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <ulink url="http://www.leonmergen.com/downloads/libpaxos-cpp-0.6.1.tar.gz">http://www.leonmergen.com/downloads/libpaxos-cpp-0.6.1.tar.gz</ulink>
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      Alternatively, you can <ulink url="http://www.leonmergen.com/downloads/">browse
      older releases</ulink>.
    </para>
    <bridgehead renderas="sect5" id="libpaxos_cpp.getting_started.h2">
      <phrase id="libpaxos_cpp.getting_started.github"/><link linkend="libpaxos_cpp.getting_started.github">Github</link>
    </bridgehead>
    <para>
      You can obtain the source directly from the <ulink url="http://github.com/solatis/libpaxos-cpp">github
      repository</ulink>:
    </para>
<programlisting><phrase role="identifier">git</phrase> <phrase role="identifier">clone</phrase> <phrase role="identifier">git</phrase><phrase role="error">@</phrase><phrase role="identifier">github</phrase><phrase role="special">.</phrase><phrase role="identifier">com</phrase><phrase role="special">:</phrase><phrase role="identifier">solatis</phrase><phrase role="special">/</phrase><phrase role="identifier">libpaxos</phrase><phrase role="special">-</phrase><phrase role="identifier">cpp</phrase><phrase role="special">.</phrase><phrase role="identifier">git</phrase>
</programlisting>
    <para>
      Keep in mind that building directly from the source repository requires you
      to have the autotools environment ready on your server.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.getting_started.h3">
      <phrase id="libpaxos_cpp.getting_started.dependencies"/><link linkend="libpaxos_cpp.getting_started.dependencies">Dependencies</link>
    </bridgehead>
    <para>
      All of this applies only to a Unix-like environment. Windows with cygwin will
      perhaps work, but is not tested. Libpaxos-cpp depends upon the following tools:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <ulink url="http://www.boost.org/">Boost.org</ulink> libraries, version
          1.49 or higher;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          GCC version 4.5 or higher (C++11 support is required).
        </simpara>
      </listitem>
    </itemizedlist>
    <note>
      <para>
        GCC version 4.4 is known to generate internal compiler errors and therefore
        at least version 4.5 is recommended.
      </para>
    </note>
    <note>
      <para>
        clang++ version 3.0 is known to generate internal compiler errors due to
        very limited lambda support. Version 3.1 might work but is untested.
      </para>
    </note>
    <bridgehead renderas="sect3" id="libpaxos_cpp.getting_started.h4">
      <phrase id="libpaxos_cpp.getting_started.building_libpaxos_cpp"/><link linkend="libpaxos_cpp.getting_started.building_libpaxos_cpp">Building
      libpaxos-cpp</link>
    </bridgehead>
    <para>
      libpaxos-cpp follows the normal autotools flow of installing libraries:
    </para>
<programlisting><phrase role="identifier">wget</phrase> <phrase role="identifier">http</phrase><phrase role="special">://</phrase><phrase role="identifier">www</phrase><phrase role="special">.</phrase><phrase role="identifier">leonmergen</phrase><phrase role="special">.</phrase><phrase role="identifier">com</phrase><phrase role="special">/</phrase><phrase role="identifier">download</phrase><phrase role="special">/</phrase><phrase role="identifier">libpaxos</phrase><phrase role="special">-</phrase><phrase role="identifier">cpp</phrase><phrase role="special">-</phrase><phrase role="identifier">VERSION</phrase><phrase role="special">.</phrase><phrase role="identifier">tar</phrase><phrase role="special">.</phrase><phrase role="identifier">gz</phrase>
<phrase role="identifier">tar</phrase> <phrase role="special">-</phrase><phrase role="identifier">xzf</phrase> <phrase role="identifier">libpaxos</phrase><phrase role="special">-</phrase><phrase role="identifier">cpp</phrase><phrase role="special">-</phrase><phrase role="identifier">VERSION</phrase><phrase role="special">.</phrase><phrase role="identifier">tar</phrase><phrase role="special">.</phrase><phrase role="identifier">gz</phrase>
<phrase role="identifier">cd</phrase> <phrase role="identifier">libpaxos</phrase><phrase role="special">-</phrase><phrase role="identifier">cpp</phrase><phrase role="special">-</phrase><phrase role="identifier">VERSION</phrase>
<phrase role="special">./</phrase><phrase role="identifier">configure</phrase> <phrase role="special">--</phrase><phrase role="identifier">enable</phrase><phrase role="special">-</phrase><phrase role="identifier">sqlite</phrase>
<phrase role="identifier">make</phrase>
<phrase role="identifier">make</phrase> <phrase role="identifier">check</phrase>
<phrase role="identifier">make</phrase> <phrase role="identifier">install</phrase>
</programlisting>
    <para>
      You can optionally choose to not --enable-sqlite, although that means the
      <link linkend="libpaxos_cpp.eventual_consistency">eventual consistency properties</link>
      of libpaxos-cpp are lost.
    </para>
  </section>
  <section id="libpaxos_cpp.tutorial">
    <title><link linkend="libpaxos_cpp.tutorial">Tutorial</link></title>
    <section id="libpaxos_cpp.tutorial.basic_server">
      <title><link linkend="libpaxos_cpp.tutorial.basic_server">Basic server</link></title>
      <para>
        From the high-level library's point of view, a Paxos server is responsible
        for processing an input message received from a client and returning an output
        message. We will start by including the necessary header and defining our
        main function.
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        First, we will define a callback for our server. The callback is essentially
        the way the paxos library interface communicates with your backend: it will
        provide you with the input message received from the client, you process
        the message and generate an output message which is sent back to the client.
      </para>
      <para>
        In our example, we are going to keep it simple and define a callback function
        which only replies with &quot;bar&quot;. Note that this uses the C++11 lambda
        interface to define the callback, but any function that accepts a proposal_id,
        a string and responds with a string can be used.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase><phrase role="special">::</phrase><phrase role="identifier">callback_type</phrase> <phrase role="identifier">callback</phrase> <phrase role="special">=</phrase>
    <phrase role="special">[](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">;</phrase>
    <phrase role="special">});</phrase>
</programlisting>
      <para>
        Now we are ready to setup our server. In this example, we will setup a server
        which listens to localhost port 1337; note that, while we use an IPv4 address
        here, IPv6 addresses are also supported.
      </para>
      <para>
        Creating a server object using this interface will launch a background thread
        which handles all network communications required for the paxos server.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase> <phrase role="identifier">callback</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now, in this example of a server of one quorum this might look a bit redundant,
        but it is important for the server to know the quorum it is in. We are going
        to tell the server that he's in a quorum of itself here; normally, you would
        add the other servers to the quorum below.
      </para>
<programlisting><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And now call .wait () on the server to ensure our application does not exit
        until the internal worker thread has stopped (which should never happen).
      </para>
<programlisting>  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        See the <link linkend="libpaxos_cpp.tutorial.basic_server.a00001">full source
        listing</link>
      </para>
      <para>
        For more in-depth information and complex examples on how to setup a server
        in different ways, <link linkend="libpaxos_cpp.reference.server">see the
        reference</link>.
      </para>
      <section id="libpaxos_cpp.tutorial.basic_server.a00001">
        <title><link linkend="libpaxos_cpp.tutorial.basic_server.a00001">Source listing
        for Basic server</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase>
                         <phrase role="special">[](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
                         <phrase role="special">{</phrase>
                            <phrase role="keyword">return</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">;</phrase>
                         <phrase role="special">});</phrase>

   <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="libpaxos_cpp.tutorial.basic_client">
      <title><link linkend="libpaxos_cpp.tutorial.basic_client">Basic client</link></title>
      <para>
        From the high-level library's point of view, a Paxos client will send a message
        to a quorum of servers and will wait for all the servers to process this
        message and generate a response. We will start by including the necessary
        header and defining our main function
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        Now, we are ready to setup our client. In this example, we will setup a basic
        client that launches a new background worker thread that will handle the
        client's I/O.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">client</phrase> <phrase role="identifier">client</phrase><phrase role="special">;</phrase>
</programlisting>
      <para>
        Just like with the server, the client needs to know the quorum it should
        connect to. In this case, we will simply add the server we created in the
        example above to the quorum.
      </para>
<programlisting><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now, we will send a command &quot;foo&quot; to all nodes inside the quorum.
        Take special note that this function returns a std::future &lt;std::string&gt;
        object here, and as such makes use of C++11's future/promise architecture.
        This function will return immediately and the client will start communicating
        to the quorum in the background.
      </para>
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">future</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">future</phrase> <phrase role="special">=</phrase> <phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And finally, since our previously defined server will always return &quot;bar&quot;,
        we will read the future's result (and thus block until the client has received
        data from all servers) and validate its output.
      </para>
<programlisting>   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">future</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        See the <link linkend="libpaxos_cpp.tutorial.basic_client.a00002">full source
        listing</link>
      </para>
      <para>
        For more in-depth information and complex examples on how to setup a client
        in different ways, <link linkend="libpaxos_cpp.reference.client">see the
        reference</link>.
      </para>
      <section id="libpaxos_cpp.tutorial.basic_client.a00002">
        <title><link linkend="libpaxos_cpp.tutorial.basic_client.a00002">Source listing
        for Basic client</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">client</phrase> <phrase role="identifier">client</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">future</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">future</phrase> <phrase role="special">=</phrase> <phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">future</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="libpaxos_cpp.tutorial.basic_lock_service_server">
      <title><link linkend="libpaxos_cpp.tutorial.basic_lock_service_server">Lock
      service.1 - Basic server</link></title>
      <para>
        This section builds upon the knowledge we acquired in the basic introduction,
        and introduces a first, real-world practical example of the paxos library:
        a distributed locking service. The service we will develop here will be an
        in-memory lock service, and the data will be volatile: once one of the servers
        is shut down, it will be impossible to recover.
      </para>
      <para>
        First, let's include the headers this example will use.
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">set</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">string</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        We will associate a lock with an id and a state. A certain id is locked when
        it appears in a set, and unlocked if otherwise. Let's declare the container
        that holds these locks.
      </para>
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">set</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">locks</phrase><phrase role="special">;</phrase>
</programlisting>
      <para>
        Next, we will define the callback function that maintains these locks. It
        will accept a command with the following definition:
      </para>
<programlisting><phrase role="identifier">command</phrase>       <phrase role="special">::=</phrase> <phrase role="identifier">action</phrase> <phrase role="char">' '</phrase> <phrase role="identifier">lock_id</phrase>
<phrase role="identifier">action</phrase>        <phrase role="special">::=</phrase> <phrase role="char">'lock'</phrase> <phrase role="special">|</phrase> <phrase role="char">'unlock'</phrase>
<phrase role="identifier">lock_id</phrase>       <phrase role="special">::=</phrase> <phrase role="identifier">string</phrase>
</programlisting>
      <para>
        As you can see from this definition, we will need to split the string to
        separate the action from the lock id.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase><phrase role="special">::</phrase><phrase role="identifier">callback_type</phrase> <phrase role="identifier">callback</phrase> <phrase role="special">=</phrase>
    <phrase role="special">[&amp;</phrase> <phrase role="identifier">locks</phrase><phrase role="special">](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">command</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
    <phrase role="special">{</phrase>
      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">split</phrase> <phrase role="special">(</phrase><phrase role="identifier">tokens</phrase><phrase role="special">,</phrase> <phrase role="identifier">command</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_any_of</phrase> <phrase role="special">(</phrase><phrase role="string">&quot; &quot;</phrase><phrase role="special">));</phrase>

      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">type</phrase>    <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;lock&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase> <phrase role="special">())</phrase>
        <phrase role="special">{</phrase>
          <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
          <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">else</phrase>
        <phrase role="special">{</phrase>
          <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
      <phrase role="special">}</phrase>
      <phrase role="keyword">else</phrase> <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;unlock&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase> <phrase role="special">())</phrase>
        <phrase role="special">{</phrase>
          <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
          <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">else</phrase>
        <phrase role="special">{</phrase>
          <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
      <phrase role="special">}</phrase>
    <phrase role="special">};</phrase>
</programlisting>
      <para>
        As you can see, this is a very crude example on how to perform different
        actions on different command inputs, and returns &quot;success&quot; or &quot;fail&quot;
        based on the state of the locks container.
      </para>
      <para>
        Next, all we need to do is the same thing we did in our first basic example,
        which is to launch our server and block until the server shuts down.
      </para>
<programlisting>  <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase> <phrase role="identifier">callback</phrase><phrase role="special">);</phrase>
  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        See the <link linkend="libpaxos_cpp.tutorial.basic_lock_service_server.a00001">full
        source listing</link>
      </para>
      <section id="libpaxos_cpp.tutorial.basic_lock_service_server.a00001">
        <title><link linkend="libpaxos_cpp.tutorial.basic_lock_service_server.a00001">Source
        listing for Basic server</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">set</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">string</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">set</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">locks</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase><phrase role="special">::</phrase><phrase role="identifier">callback_type</phrase> <phrase role="identifier">callback</phrase> <phrase role="special">=</phrase>
      <phrase role="special">[&amp;</phrase> <phrase role="identifier">locks</phrase><phrase role="special">](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">command</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
      <phrase role="special">{</phrase>
         <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">;</phrase>
         <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">split</phrase> <phrase role="special">(</phrase><phrase role="identifier">tokens</phrase><phrase role="special">,</phrase> <phrase role="identifier">command</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_any_of</phrase> <phrase role="special">(</phrase><phrase role="string">&quot; &quot;</phrase><phrase role="special">));</phrase>

         <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">type</phrase>    <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
         <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

         <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;lock&quot;</phrase><phrase role="special">)</phrase>
         <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase> <phrase role="special">())</phrase>
            <phrase role="special">{</phrase>
               <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
               <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
            <phrase role="keyword">else</phrase>
            <phrase role="special">{</phrase>
               <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
         <phrase role="special">}</phrase>
         <phrase role="keyword">else</phrase> <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;unlock&quot;</phrase><phrase role="special">)</phrase>
         <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase> <phrase role="special">())</phrase>
            <phrase role="special">{</phrase>
               <phrase role="identifier">locks</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
               <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
            <phrase role="keyword">else</phrase>
            <phrase role="special">{</phrase>
               <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
         <phrase role="special">}</phrase>

         <phrase role="comment">// Unrecognized command type</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">};</phrase>

   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase> <phrase role="identifier">callback</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="libpaxos_cpp.tutorial.basic_lock_service_client">
      <title><link linkend="libpaxos_cpp.tutorial.basic_lock_service_client">Lock
      service.1 - Basic client</link></title>
      <para>
        This section describes the client that connects to our distributed lock service's
        server. It describes a trivial client that executes a few lock commands and
        verifies the correct result.
      </para>
      <para>
        First, let's include our headers and define the client object.
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">client</phrase> <phrase role="identifier">client</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now that we have this client, let's attempt to lock the lock with id &quot;foo&quot;
        and verify that it results in the proper command:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now, let's try to re-acquire this lock and expect a failure:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        However, acquiring a lock with another id should succeed:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And re-acquiring that lock should fail:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now, let's release both locks and verify it succeeds:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
<phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And verify re-releasing those locks fails:
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
<phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        See the <link linkend="libpaxos_cpp.tutorial.basic_lock_service_client.a00001">full
        source listing</link>
      </para>
      <section id="libpaxos_cpp.tutorial.basic_lock_service_client.a00001">
        <title><link linkend="libpaxos_cpp.tutorial.basic_lock_service_client.a00001">Source
        listing for Basic client</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">client</phrase> <phrase role="identifier">client</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;lock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">client</phrase><phrase role="special">.</phrase><phrase role="identifier">send</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;unlock bar&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="libpaxos_cpp.tutorial.durable_lock_service_server">
      <title><link linkend="libpaxos_cpp.tutorial.durable_lock_service_server">Lock
      service.2 - Durable server</link></title>
      <para>
        In the previous example we built a <link linkend="libpaxos_cpp.tutorial.basic_lock_service_server">lock
        service server</link> and client. There was one severe limitation about this
        lock service, though: it will not survive a shutdown or crash of the quorum.
      </para>
      <para>
        In this section we will improve the lock service to be able to survive a
        crash and complete our full production-ready distributed locking service.
        The example describes three separate files: server.cpp, datastore.hpp and
        datastore.cpp. We will discuss the implementation of each file below.
      </para>
      <bridgehead renderas="sect4" id="libpaxos_cpp.tutorial.durable_lock_service_server.h0">
        <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.server_cpp"/><link
        linkend="libpaxos_cpp.tutorial.durable_lock_service_server.server_cpp">server.cpp</link>
      </bridgehead>
      <para>
        This file is similar to the server we implemented in the previous example,
        but will not manage the locks itself anymore; instead, it will store and
        retrieve the locks using an external datastore. First, let's define our includes
        again.
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">string</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">configuration</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">durable</phrase><phrase role="special">/</phrase><phrase role="identifier">sqlite</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;datastore.hpp&quot;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">datastore</phrase> <phrase role="identifier">store</phrase><phrase role="special">;</phrase>
</programlisting>
      <para>
        As you can see, we include and define a datastore in our main function: this
        datastore will be our interface to the current state of our application.
      </para>
      <para>
        Next, we will define our callback function. For clarity, we will describe
        this function in several parts.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase><phrase role="special">::</phrase><phrase role="identifier">callback_type</phrase> <phrase role="identifier">callback</phrase> <phrase role="special">=</phrase>
   <phrase role="special">[&amp;</phrase> <phrase role="identifier">store</phrase><phrase role="special">](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">command</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">())</phrase>
      <phrase role="special">{</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">}</phrase>
</programlisting>
      <para>
        As you can see above, the first thing we do is compare the incoming proposal
        id with the proposal id of the value we receive. In some situations, it's
        possible that we receive a value already processed by our application; this
        code ensures that we determine whether this is the case, and ignore the command
        if so. For more information on why this is, see the documentation about
        <link linkend="libpaxos_cpp.eventual_consistency">eventual consistency</link>.
      </para>
      <para>
        Next, we will define the rest of our callback function. This is very similar
        to our first lock service and uses the same protocol, but instead of maintaining
        the locks itself, it forwards this logic to our datastore.
      </para>
<programlisting>   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">split</phrase> <phrase role="special">(</phrase><phrase role="identifier">tokens</phrase><phrase role="special">,</phrase> <phrase role="identifier">command</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_any_of</phrase> <phrase role="special">(</phrase><phrase role="string">&quot; &quot;</phrase><phrase role="special">));</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">type</phrase>    <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;lock&quot;</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">false</phrase><phrase role="special">)</phrase>
      <phrase role="special">{</phrase>
         <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
                             <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">}</phrase>
      <phrase role="keyword">else</phrase>
      <phrase role="special">{</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">}</phrase>
   <phrase role="special">}</phrase>
   <phrase role="keyword">else</phrase> <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;unlock&quot;</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
      <phrase role="special">{</phrase>
         <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
                             <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">}</phrase>
      <phrase role="keyword">else</phrase>
      <phrase role="special">{</phrase>
         <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
      <phrase role="special">}</phrase>
   <phrase role="special">}</phrase>

   <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      <para>
        Now that we have defined our callback function, it is time to define our
        paxos server. Since we're building a durable server here, we will also provide
        a durable storage of the log history. Once again, for more information about
        this, see the documentation about <link linkend="libpaxos_cpp.eventual_consistency">eventual
        consistency</link>.
      </para>
<programlisting><phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">configuration</phrase> <phrase role="identifier">configuration</phrase><phrase role="special">;</phrase>

<phrase role="identifier">configuration</phrase><phrase role="special">.</phrase><phrase role="identifier">set_durable_storage</phrase> <phrase role="special">(</phrase>
   <phrase role="keyword">new</phrase> <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">durable</phrase><phrase role="special">::</phrase><phrase role="identifier">sqlite</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;paxos.sqlite&quot;</phrase><phrase role="special">));</phrase>
</programlisting>
      <para>
        As you can see, we now have a configuration that provides a durable paxos
        history based on sqlite, which will be stored in paxos.sqlite. We're now
        ready to start our server and ensure our server uses the configuration we
        just declared.
      </para>
<programlisting>  <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase> <phrase role="identifier">callback</phrase><phrase role="special">,</phrase> <phrase role="identifier">configuration</phrase><phrase role="special">);</phrase>
  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        And with this, our server defintion is done. It's now time to implement our
        datastore.
      </para>
      <bridgehead renderas="sect4" id="libpaxos_cpp.tutorial.durable_lock_service_server.h1">
        <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.datastore_hpp"/><link
        linkend="libpaxos_cpp.tutorial.durable_lock_service_server.datastore_hpp">datastore.hpp</link>
      </bridgehead>
      <para>
        The interface to our datastore is pretty simple. In the previous section
        you have already seen a few functions we use, we will describe their responsibilities
        below.
      </para>
      <para>
        First, let's include some headers. Note that we will be using sqlite as our
        persistent data store here.
      </para>
<programlisting><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">DATASTORE_HPP</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">DATASTORE_HPP</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">stdint</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">sqlite3</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">datastore</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
</programlisting>
      <para>
        We need a constructor which sets up our sqlite connection, and a destructor
        which closes it.
      </para>
<programlisting><phrase role="identifier">datastore</phrase> <phrase role="special">();</phrase>
<phrase role="special">~</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">();</phrase>
</programlisting>
      <para>
        You could see in server.cpp that we require to know the most recent proposal
        id from our datastore, to know the latest &quot;version&quot; of the data
        stored in our datastore.
      </para>
<programlisting><phrase role="identifier">int64_t</phrase>
<phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">();</phrase>
</programlisting>
      <para>
        We need a function that determines whether a lock is currently acquired or
        not.
      </para>
<programlisting><phrase role="keyword">bool</phrase>
<phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        We need a function that acquires a lock. Note that, since this is an operation
        that changes the state of our data, we also write the latest proposal id
        along with it.
      </para>
<programlisting><phrase role="keyword">void</phrase>
<phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>                   <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        We need a function that releases a lock. Once again, the proposal id is written
        along with it.
      </para>
<programlisting><phrase role="keyword">void</phrase>
<phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>                   <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now we define a few private member functions which are used to initially
        setup our tables.
      </para>
<programlisting><phrase role="keyword">private</phrase><phrase role="special">:</phrase>

   <phrase role="keyword">bool</phrase>
   <phrase role="identifier">has_table</phrase> <phrase role="special">();</phrase>

   <phrase role="keyword">void</phrase>
   <phrase role="identifier">create_tables</phrase> <phrase role="special">();</phrase>
</programlisting>
      <para>
        And finally, we use a single member variable which describes our sqlite state.
      </para>
<programlisting><phrase role="keyword">private</phrase><phrase role="special">:</phrase>

   <phrase role="identifier">sqlite3</phrase> <phrase role="special">*</phrase>    <phrase role="identifier">db_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase>
</programlisting>
      <bridgehead renderas="sect4" id="libpaxos_cpp.tutorial.durable_lock_service_server.h2">
        <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.datastore_cpp"/><link
        linkend="libpaxos_cpp.tutorial.durable_lock_service_server.datastore_cpp">datastore.cpp</link>
      </bridgehead>
      <para>
        This class implements the actual communications with our SQLite backend.
        Note that a lot of this code is just SQLite crud and has very little relevance
        to libpaxos-cpp, but we provide this implementation for you to illustrate
        the way you can (and should) associate a proposal id with the state of your
        data.
      </para>
      <para>
        First of all, let's include some headers and define our constructor.
      </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">assert</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">lexical_cast</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;datastore.hpp&quot;</phrase>

<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        Now, we're going to open the database &quot;locks.db&quot; where the lock
        state of our distributed lock service is stored.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_open</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;locks.sqlite&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">db_</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
<phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">NULL</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Now, if this is the first time this application is ran, we must create our
        database tables.
      </para>
<programlisting>   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">has_table</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="keyword">false</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">create_tables</phrase> <phrase role="special">();</phrase>
   <phrase role="special">}</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        Let's define our destructor. All it needs to do is cleanly shut down our
        database.
      </para>
<programlisting><phrase role="identifier">datastore</phrase><phrase role="special">::~</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_close</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        We are going to define our has_table () function. It looks in the sqlite_master
        table to detect whether our tables already exist or not and returns the correct
        boolean value.
      </para>
<programlisting><phrase role="keyword">bool</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">has_table</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  COUNT (*) &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  sqlite_master &quot;</phrase>
      <phrase role="string">&quot;WHERE &quot;</phrase>
      <phrase role="string">&quot;  type = 'table' &quot;</phrase>
      <phrase role="string">&quot;  AND (name = 'locks' OR name = 'proposal_id')&quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        Now, we're going to define our create_tables () function.
      </para>
<programlisting><phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">create_tables</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        We have a &quot;locks&quot; table which only stores a lock id. If a lock
        is in the table, the lock is acquired, if not, the lock is currently released.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="string">&quot;CREATE TABLE locks (&quot;</phrase>
                 <phrase role="string">&quot;  id TEXT PRIMARY KEY ASC) &quot;</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Create our table where we will store our proposal id. It will only contain
        a single row with our proposal id in it.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="string">&quot;CREATE TABLE proposal_id (&quot;</phrase>
                 <phrase role="string">&quot;  id INTEGER PRIMARY KEY ASC) &quot;</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And initialize our proposal id with a default value of 0.
      </para>
<programlisting>   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;INSERT INTO proposal_id VALUES (0)&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        We are going to define our most_recent_proposal_id () function. All it does
        is select our proposal id from the proposal_id table and return it. It also
        verifies that there always is exactly one row.
      </para>
<programlisting><phrase role="identifier">int64_t</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  id &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  proposal_id &quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>


   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase> <phrase role="special">=</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase> <phrase role="special">==</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">proposal_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        We are going to define our has_lock function. It counts the amount of times
        our lock appears in our locks table. If there is exactly one lock, it returns
        true, otherwise it returns false.
      </para>
<programlisting><phrase role="keyword">bool</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  COUNT (*) &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  locks &quot;</phrase>
      <phrase role="string">&quot;WHERE &quot;</phrase>
      <phrase role="string">&quot;  id = '&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;'&quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;lock_id = '&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;', result = &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        Now we are going to define our acquire_lock function.
      </para>
<programlisting><phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>              <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        Since we want to do multiple data modification operations and want them to
        occur atomically (either they are all applied or none of them are applied),
        let's start a transaction.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="string">&quot;BEGIN&quot;</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Insert our lock into the table.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;INSERT INTO locks (id) VALUES ('&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;')&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Update our most recent proposal id.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;UPDATE &quot;</phrase>
                              <phrase role="string">&quot;  proposal_id &quot;</phrase>
                              <phrase role="string">&quot;SET &quot;</phrase>
                              <phrase role="string">&quot;  id = &quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">lexical_cast</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">)).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And commit the data.
      </para>
<programlisting>   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;COMMIT&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

<phrase role="special">}</phrase>
</programlisting>
      <para>
        Our release_lock function works similarly to the acquire_lock function, but
        instead of inserting a lock it removes the lock.
      </para>
<programlisting><phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>              <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
</programlisting>
      <para>
        One again, start transaction.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="string">&quot;BEGIN&quot;</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Delete our lock from the table.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;DELETE FROM locks WHERE id = '&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;'&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        Update our most recent proposal id.
      </para>
<programlisting><phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;UPDATE &quot;</phrase>
                              <phrase role="string">&quot;  proposal_id &quot;</phrase>
                              <phrase role="string">&quot;SET &quot;</phrase>
                              <phrase role="string">&quot;  id = &quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">lexical_cast</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">)).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
</programlisting>
      <para>
        And commit our transaction.
      </para>
<programlisting>   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;COMMIT&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

<phrase role="special">}</phrase>
</programlisting>
      <para>
        And with that code, our distributed lock service is now completed. You have
        now learned how to build a durable service using libpaxos-cpp.
      </para>
      <para>
        See the <link linkend="libpaxos_cpp.tutorial.durable_lock_service_server.a00001">full
        source listing</link>.
      </para>
      <section id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001">
        <title><link linkend="libpaxos_cpp.tutorial.durable_lock_service_server.a00001">Source
        listing for Durable server</link></title>
        <bridgehead renderas="sect5" id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.h0">
          <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.server_cpp"/><link
          linkend="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.server_cpp">server.cpp</link>
        </bridgehead>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">string</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">configuration</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">paxos</phrase><phrase role="special">++/</phrase><phrase role="identifier">durable</phrase><phrase role="special">/</phrase><phrase role="identifier">sqlite</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;datastore.hpp&quot;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">datastore</phrase> <phrase role="identifier">store</phrase><phrase role="special">;</phrase>

  <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase><phrase role="special">::</phrase><phrase role="identifier">callback_type</phrase> <phrase role="identifier">callback</phrase> <phrase role="special">=</phrase>
     <phrase role="special">[&amp;</phrase> <phrase role="identifier">store</phrase><phrase role="special">](</phrase><phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">command</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
     <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">())</phrase>
        <phrase role="special">{</phrase>
           <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">split</phrase> <phrase role="special">(</phrase><phrase role="identifier">tokens</phrase><phrase role="special">,</phrase> <phrase role="identifier">command</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_any_of</phrase> <phrase role="special">(</phrase><phrase role="string">&quot; &quot;</phrase><phrase role="special">));</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">type</phrase>    <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tokens</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase> <phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;lock&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">{</phrase>
           <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">false</phrase><phrase role="special">)</phrase>
           <phrase role="special">{</phrase>
              <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
                                  <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
              <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
           <phrase role="special">}</phrase>
           <phrase role="keyword">else</phrase>
           <phrase role="special">{</phrase>
              <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
           <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">else</phrase> <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">type</phrase> <phrase role="special">==</phrase> <phrase role="string">&quot;unlock&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">{</phrase>
           <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
           <phrase role="special">{</phrase>
              <phrase role="identifier">store</phrase><phrase role="special">.</phrase><phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
                                  <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>
              <phrase role="keyword">return</phrase> <phrase role="string">&quot;success&quot;</phrase><phrase role="special">;</phrase>
           <phrase role="special">}</phrase>
           <phrase role="keyword">else</phrase>
           <phrase role="special">{</phrase>
              <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
           <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>

        <phrase role="keyword">return</phrase> <phrase role="string">&quot;fail&quot;</phrase><phrase role="special">;</phrase>
     <phrase role="special">};</phrase>


  <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">configuration</phrase> <phrase role="identifier">configuration</phrase><phrase role="special">;</phrase>

  <phrase role="identifier">configuration</phrase><phrase role="special">.</phrase><phrase role="identifier">set_durable_storage</phrase> <phrase role="special">(</phrase>
     <phrase role="keyword">new</phrase> <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">durable</phrase><phrase role="special">::</phrase><phrase role="identifier">sqlite</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;paxos.sqlite&quot;</phrase><phrase role="special">));</phrase>

  <phrase role="identifier">paxos</phrase><phrase role="special">::</phrase><phrase role="identifier">server</phrase> <phrase role="identifier">server</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">,</phrase> <phrase role="identifier">callback</phrase><phrase role="special">,</phrase> <phrase role="identifier">configuration</phrase><phrase role="special">);</phrase>
  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;127.0.0.1&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">1337</phrase><phrase role="special">);</phrase>

  <phrase role="identifier">server</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase> <phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <bridgehead renderas="sect5" id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.h1">
          <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.datastore_hpp"/><link
          linkend="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.datastore_hpp">datastore.hpp</link>
        </bridgehead>
<programlisting><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">DATASTORE_HPP</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">DATASTORE_HPP</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">stdint</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">sqlite3</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">datastore</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>

   <phrase role="identifier">datastore</phrase> <phrase role="special">();</phrase>

   <phrase role="special">~</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">();</phrase>

   <phrase role="identifier">int64_t</phrase>
   <phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">();</phrase>

   <phrase role="keyword">bool</phrase>
   <phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">void</phrase>
   <phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">int64_t</phrase>                   <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">void</phrase>
   <phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">int64_t</phrase>                   <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>       <phrase role="identifier">lock_id</phrase><phrase role="special">);</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>

   <phrase role="keyword">void</phrase>
   <phrase role="identifier">create_tables</phrase> <phrase role="special">();</phrase>

   <phrase role="keyword">bool</phrase>
   <phrase role="identifier">has_table</phrase> <phrase role="special">();</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>

   <phrase role="identifier">sqlite3</phrase> <phrase role="special">*</phrase>    <phrase role="identifier">db_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase>
</programlisting>
        <bridgehead renderas="sect5" id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.h2">
          <phrase id="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.datastore_cpp"/><link
          linkend="libpaxos_cpp.tutorial.durable_lock_service_server.a00001.datastore_cpp">datastore.cpp</link>
        </bridgehead>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">assert</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">lexical_cast</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;datastore.hpp&quot;</phrase>

<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_open</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;locks.sqlite&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">db_</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">NULL</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">has_table</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="keyword">false</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">create_tables</phrase> <phrase role="special">();</phrase>
   <phrase role="special">}</phrase>
<phrase role="special">}</phrase>


<phrase role="identifier">datastore</phrase><phrase role="special">::~</phrase><phrase role="identifier">datastore</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_close</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">int64_t</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">most_recent_proposal_id</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  id &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  proposal_id &quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>


   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase> <phrase role="special">=</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase> <phrase role="special">==</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">proposal_id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">bool</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">has_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  COUNT (*) &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  locks &quot;</phrase>
      <phrase role="string">&quot;WHERE &quot;</phrase>
      <phrase role="string">&quot;  id = '&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;'&quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="number">0</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;lock_id = '&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;', result = &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">result</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">acquire_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>              <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;BEGIN&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;INSERT INTO locks (id) VALUES ('&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;')&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;UPDATE &quot;</phrase>
                                 <phrase role="string">&quot;  proposal_id &quot;</phrase>
                                 <phrase role="string">&quot;SET &quot;</phrase>
                                 <phrase role="string">&quot;  id = &quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">lexical_cast</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">)).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;COMMIT&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

<phrase role="special">}</phrase>


<phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">release_lock</phrase> <phrase role="special">(</phrase>
   <phrase role="identifier">int64_t</phrase>              <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase>  <phrase role="identifier">lock_id</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;BEGIN&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;DELETE FROM locks WHERE id = '&quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">lock_id</phrase> <phrase role="special">+</phrase> <phrase role="string">&quot;'&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;UPDATE &quot;</phrase>
                                 <phrase role="string">&quot;  proposal_id &quot;</phrase>
                                 <phrase role="string">&quot;SET &quot;</phrase>
                                 <phrase role="string">&quot;  id = &quot;</phrase> <phrase role="special">+</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">lexical_cast</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">)).</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;COMMIT&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

<phrase role="special">}</phrase>


<phrase role="keyword">void</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">create_tables</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;CREATE TABLE locks (&quot;</phrase>
                    <phrase role="string">&quot;  id TEXT PRIMARY KEY ASC) &quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;CREATE TABLE proposal_id (&quot;</phrase>
                    <phrase role="string">&quot;  id INTEGER PRIMARY KEY ASC) &quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase>
      <phrase role="identifier">sqlite3_exec</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                    <phrase role="string">&quot;INSERT INTO proposal_id VALUES (0)&quot;</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>


<phrase role="keyword">bool</phrase>
<phrase role="identifier">datastore</phrase><phrase role="special">::</phrase><phrase role="identifier">has_table</phrase> <phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">query</phrase> <phrase role="special">=</phrase>
      <phrase role="string">&quot;SELECT &quot;</phrase>
      <phrase role="string">&quot;  COUNT (*) &quot;</phrase>
      <phrase role="string">&quot;FROM &quot;</phrase>
      <phrase role="string">&quot;  sqlite_master &quot;</phrase>
      <phrase role="string">&quot;WHERE &quot;</phrase>
      <phrase role="string">&quot;  type = 'table' &quot;</phrase>
      <phrase role="string">&quot;  AND (name = 'locks' OR name = 'proposal_id')&quot;</phrase><phrase role="special">;</phrase>

   <phrase role="identifier">sqlite3_stmt</phrase> <phrase role="special">*</phrase> <phrase role="identifier">prepared_statement</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_prepare</phrase> <phrase role="special">(</phrase><phrase role="identifier">db_</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase> <phrase role="special">(),</phrase>
                            <phrase role="identifier">query</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase> <phrase role="special">(),</phrase>
                            <phrase role="special">&amp;</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase>
                            <phrase role="identifier">NULL</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">int64_t</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_step</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_ROW</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_column_count</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqlite3_column_int64</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>

   <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">sqlite3_finalize</phrase> <phrase role="special">(</phrase><phrase role="identifier">prepared_statement</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">SQLITE_OK</phrase><phrase role="special">);</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <bridgehead renderas="sect3" id="libpaxos_cpp.tutorial.h0">
      <phrase id="libpaxos_cpp.tutorial.basic_introduction"/><link linkend="libpaxos_cpp.tutorial.basic_introduction">Basic
      introduction</link>
    </bridgehead>
    <para>
      The tutorial programs in this section introduce the fundamental concepts required
      to use the Paxos library. Keep in mind that in these examples, we focus on
      the high level interface and keep the internals out of the explanation as much
      as possible.
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <link linkend="libpaxos_cpp.tutorial.basic_server">Introduction.1 - Basic
          server</link>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="libpaxos_cpp.tutorial.basic_client">Introduction.1 - Basic
          client</link>
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3" id="libpaxos_cpp.tutorial.h1">
      <phrase id="libpaxos_cpp.tutorial.a_distributed_lock_service"/><link linkend="libpaxos_cpp.tutorial.a_distributed_lock_service">A
      distributed lock service</link>
    </bridgehead>
    <para>
      The tutorial programs in this section implement a distributed locking service.
      The examples build up in complexity and eventually introduce to you a production-ready
      distributed lock service.
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <link linkend="libpaxos_cpp.tutorial.basic_lock_service_server">Lock service.1
          - Basic server</link>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="libpaxos_cpp.tutorial.basic_lock_service_client">Lock service.1
          - Basic client</link>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="libpaxos_cpp.tutorial.durable_lock_service_server">Lock
          service.2 - Durable server</link>
        </simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="libpaxos_cpp.eventual_consistency">
    <title><link linkend="libpaxos_cpp.eventual_consistency">Eventual consistency</link></title>
    <para>
      The <ulink url="http://research.microsoft.com/apps/pubs/default.aspx?id=64631">Paxos
      protocol</ulink> defines the following safeness / liveness requirements:
    </para>
    <blockquote>
      <para>
        <emphasis><quote>If value C has been proposed, then eventually learner L
        will learn some value</quote></emphasis>
      </para>
    </blockquote>
    <para>
      It is important to realize that this also applies to learners that are not
      available to the live quorum: if a learner is temporarily disconnected from
      the quorum, it will eventually have to learn of all values proposed to the
      quorum while it was disconnected. This implies some sort of eventual consistency
      mechanism must be in place to ensure this property of the algorithm is not
      violated.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.eventual_consistency.h0">
      <phrase id="libpaxos_cpp.eventual_consistency.implementation"/><link linkend="libpaxos_cpp.eventual_consistency.implementation">Implementation</link>
    </bridgehead>
    <para>
      libpaxos-cpp implements an eventual consistency algorithm that meets this requirement.
      It maintains a history of all recently proposed values within the quorum. When
      a node is reconnected to the quorum after being temporarily disconnected, the
      library employs a catch-up mechanism to bring the node up-to-date with all
      the proposed values while the node was disconnected.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.eventual_consistency.h1">
      <phrase id="libpaxos_cpp.eventual_consistency.durable_history"/><link linkend="libpaxos_cpp.eventual_consistency.durable_history">Durable
      history</link>
    </bridgehead>
    <para>
      This implementation implies some sort of durably stored history must be in
      place; otherwise, when all nodes crash over a certain period of time, there
      is no way to recover all nodes to the correct state. In fact, it is impossible
      to know which node has the most recent state.
    </para>
    <para>
      To tackle this problem, we implement a backend to store the (recent) history
      on a durable storage device.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.eventual_consistency.h2">
      <phrase id="libpaxos_cpp.eventual_consistency.application_requirements"/><link
      linkend="libpaxos_cpp.eventual_consistency.application_requirements">Application
      requirements</link>
    </bridgehead>
    <para>
      In normal operation, your application's model that processes the proposed values
      is always in the most recent, consistent state. But the state between the Paxos
      protocol and your application's state can get out of sync. Specifically, there
      are two things that happen when a Paxos request is accepted at a server:
    </para>
    <orderedlist>
      <listitem>
        <simpara>
          your application processes the proposal and alters its state;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          libpaxos-cpp stores the proposal in the durable log history and marks the
          proposal as processed.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      If the application crashes in between these two actions, the Paxos state and
      your application's state go out of sync. This is a rare situation to occur,
      but it does need to be accounted for.
    </para>
    <bridgehead renderas="sect5" id="libpaxos_cpp.eventual_consistency.h3">
      <phrase id="libpaxos_cpp.eventual_consistency.proposal_id"/><link linkend="libpaxos_cpp.eventual_consistency.proposal_id">Proposal
      id</link>
    </bridgehead>
    <para>
      To solve this issue of inconsistency within your application, we provide you
      with the &quot;proposal_id&quot; of a proposed value to your application's
      processing function. This proposal_id can be considered as a version number,
      and will always increment by 1. By associating your application's state with
      the most recent proposal_id it has received, you can determine whether you
      need to apply a certain operation or not.
    </para>
    <para>
      For example, your processing function might look something like this:
    </para>
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>
<phrase role="identifier">callback</phrase> <phrase role="special">(</phrase>
  <phrase role="identifier">int64_t</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
  <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
  <phrase role="special">{</phrase>
    <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">model</phrase><phrase role="special">.</phrase><phrase role="identifier">proposal_version</phrase> <phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
      <phrase role="identifier">model</phrase><phrase role="special">.</phrase><phrase role="identifier">process</phrase> <phrase role="special">(</phrase><phrase role="identifier">proposal_id</phrase><phrase role="special">,</phrase>
                     <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">assert</phrase> <phrase role="special">(</phrase><phrase role="identifier">model</phrase><phrase role="special">.</phrase><phrase role="identifier">proposal_version</phrase> <phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">proposal_id</phrase><phrase role="special">);</phrase>
  <phrase role="special">}</phrase>
</programlisting>
    <para>
      This will ensure that, in case a certain value is accidentally processed twice,
      your model remains in a consistent state.
    </para>
    <important>
      <para>
        You are free to ignore the proposal id. However, if you choose to do so,
        it is important to realize that whenever your application experiences an
        unclean shutdown, it is impossible for libpaxos-cpp to guarantee your application's
        state and the state of the durable log history are in sync. In that case,
        you must always completely re-sync from a node that cleanly shut down. Therefore,
        it is recommended that you take the effort to implement this correctly.
      </para>
    </important>
    <para>
      For a more elaborate example on how to implement this correctly, see the <link
      linkend="libpaxos_cpp.tutorial.durable_lock_service_server">durable lock service
      tutorial</link>.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.eventual_consistency.h4">
      <phrase id="libpaxos_cpp.eventual_consistency.adding_a_new_server"/><link linkend="libpaxos_cpp.eventual_consistency.adding_a_new_server">Adding
      a new server</link>
    </bridgehead>
    <para>
      Adding a new server to the quorum without shutting down the entire quorum can
      be tricky. Consider these facts:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          the quorum will only have a history of recently proposed values, and as
          such is unable to sync an empty node's state from scratch;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          even if it would keep a history of everything since the first launch of
          the quorum, re-playing such a long log history can take ages.
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      It would be easier if you could just copy an existing node's state and use
      that as a base for the new node. And this is exactly the steps we recommend.
    </para>
    <para>
      On the existing server:
    </para>
<programlisting><phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="identifier">killall</phrase> <phrase role="special">-</phrase><phrase role="identifier">SIGTERM</phrase> <phrase role="identifier">application</phrase>
<phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="identifier">scp</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase><phrase role="special">.</phrase><phrase role="identifier">data</phrase> <phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server2</phrase><phrase role="special">:/</phrase><phrase role="identifier">home</phrase><phrase role="special">/</phrase><phrase role="identifier">user</phrase><phrase role="special">/</phrase><phrase role="identifier">application</phrase><phrase role="special">.</phrase><phrase role="identifier">data</phrase>
<phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase>
</programlisting>
    <para>
      On the new server:
    </para>
<programlisting><phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server2</phrase> <phrase role="error">$</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase>
</programlisting>
    <para>
      Note that we completely discard the entire history of Paxos logs. This will
      make the Paxos library send the new server <emphasis role="bold">all</emphasis>
      the recent history. If this is not what you want, you should copy the Paxos
      state along with your application state.
    </para>
    <para>
      On the existing server:
    </para>
<programlisting><phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="identifier">killall</phrase> <phrase role="special">-</phrase><phrase role="identifier">SIGTERM</phrase> <phrase role="identifier">application</phrase>
<phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="identifier">scp</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase><phrase role="special">.</phrase><phrase role="identifier">data</phrase> <phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server2</phrase><phrase role="special">:/</phrase><phrase role="identifier">home</phrase><phrase role="special">/</phrase><phrase role="identifier">user</phrase><phrase role="special">/</phrase><phrase role="identifier">application</phrase><phrase role="special">.</phrase><phrase role="identifier">data</phrase>
<phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="identifier">scp</phrase> <phrase role="special">./</phrase><phrase role="identifier">paxos</phrase><phrase role="special">.</phrase><phrase role="identifier">sqlite</phrase> <phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server2</phrase><phrase role="special">:/</phrase><phrase role="identifier">home</phrase><phrase role="special">/</phrase><phrase role="identifier">user</phrase><phrase role="special">/</phrase><phrase role="identifier">paxos</phrase><phrase role="special">.</phrase><phrase role="identifier">sqlite</phrase>
<phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server1</phrase> <phrase role="error">$</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase>
</programlisting>
    <para>
      On the new server:
    </para>
<programlisting><phrase role="identifier">user</phrase><phrase role="error">@</phrase><phrase role="identifier">server2</phrase> <phrase role="error">$</phrase> <phrase role="special">./</phrase><phrase role="identifier">application</phrase>
</programlisting>
    <para>
      This, of course, assumes you use the <link linkend="libpaxos_cpp.reference.durable__sqlite">sqlite
      durable storage backend</link> with the filename &quot;paxos.sqlite&quot;.
    </para>
  </section>
  <section id="libpaxos_cpp.reference">
    <title><link linkend="libpaxos_cpp.reference">Reference</link></title>
    <xi:include href="../../../quickref.xml" />
  </section>
  <section id="libpaxos_cpp.revision_history">
    <title><link linkend="libpaxos_cpp.revision_history">Revision history</link></title>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h0">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_6_1"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_6_1">libpaxos-cpp
      0.6.1</link>
    </bridgehead>
    <para>
      Releasing version 0.6.1 of libpaxos-cpp, which implements:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          a few bugfixes for theoretical corner cases;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          automatic cleanup of old values in the durable storage backend.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h1">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_6_0"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_6_0">libpaxos-cpp
      0.6.0</link>
    </bridgehead>
    <para>
      Releasing version 0.6.0 of libpaxos-cpp, which implements:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          eventual consistency for the learners inside the quorum;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          a durable storage backend for the acceptors inside the quorum.
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      This feature release allows a learner to be temporarily shut down or disconnected
      from the quorum, and automatically catch up with the rest of the quorum upon
      reconnection.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h2">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_5_1"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_5_1">libpaxos-cpp
      0.5.1</link>
    </bridgehead>
    <para>
      Bugfix release which fixes two important bugs:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          a race condition in the client when sending requests with high throughput
          has been fixed;
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          an corner case error that could occur when multiple followers disconnected
          with the leader at the exact same time could corrupt the connection between
          the leader and the client.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h3">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_5_0"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_5_0">libpaxos-cpp
      0.5.0</link>
    </bridgehead>
    <para>
      Releasing version 0.5.0 of libpaxos-cpp. As you might have noticed, I skipped
      the 0.4 release, but only because there has been a huge overhaul of the backend.
      Essentially we're now using a leader election protocol embedded within the
      paxos protocol itself, resulting in far more increased reliability and quicker
      recovery.
    </para>
    <para>
      As a result of this, the client interface has changed a bit again. Now, there's
      no need to explicitly start a server or client, it automatically synchronizes
      with the quorum when you start talking to it. The client now never throws when
      you call send (), and it automatically retries failed requests before setting
      the future's value. In other words: the client now never throws on temporary
      errors.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h4">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_3_0"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_3_0">libpaxos-cpp
      0.3.0</link>
    </bridgehead>
    <para>
      Releasing version 0.3.0 of libpaxos-cpp, which might be a bit soon, but there
      client interface has changed a bit. Now, instead of both an async and sync
      API interface, we're using std::future's in the client API. Furthermore, the
      connection management mechanism between the leader and followers has been improved.
    </para>
    <bridgehead renderas="sect3" id="libpaxos_cpp.revision_history.h5">
      <phrase id="libpaxos_cpp.revision_history.libpaxos_cpp_0_2_0"/><link linkend="libpaxos_cpp.revision_history.libpaxos_cpp_0_2_0">libpaxos-cpp
      0.2.0</link>
    </bridgehead>
    <para>
      Releasing version 0.2.0 of libpaxos-cpp, which is the first official version.
    </para>
  </section>
  <bridgehead renderas="sect2" id="libpaxos_cpp.h0">
    <phrase id="libpaxos_cpp.introduction"/><link linkend="libpaxos_cpp.introduction">Introduction</link>
  </bridgehead>
  <para>
    libpaxos-cpp is a C++ implementation of the Paxos distributed consensus protocol,
    and is distributed under the 3-clause BSD license. It aims to provide the simplest
    interface possible and hides much of the &quot;gnarly stuff&quot;. As such, it
    currently provides the following functionality:
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        Completely asynchronous, based on Boost.Asio;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Automated leader election, based on Chang and Roberts' algorithm;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Eventual consistency: a temporarely disconnected node is automatically recovered
        using a catch-up algorithm;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Durable storage backend for the eventual consistency based on <ulink url="http://sqlite.org/">SQLite</ulink>;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Uses modern C++11 standards
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        All guarantees that the Paxos protocol provides are provided by this library.
      </simpara>
    </listitem>
  </itemizedlist>
  <para>
    Of course, there are a few limitations and assumptions:
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        The network is secure: everyone that is able to communicate with the libpaxos-cpp
        processes are trusted;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        There are no weird routing issues inside the quorum;
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        At the moment, it only implements the Basic Paxos protocol, Multi Paxos is
        scheduled for a future release.
      </simpara>
    </listitem>
  </itemizedlist>
  <bridgehead renderas="sect2" id="libpaxos_cpp.h1">
    <phrase id="libpaxos_cpp.support"/><link linkend="libpaxos_cpp.support">Support</link>
  </bridgehead>
  <para>
    There is a Google Groups mailinglist for libpaxos-cpp to which you can subscribe
    and ask your questions:
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        <ulink url="http://groups.google.com/group/libpaxos-cpp">http://groups.google.com/group/libpaxos-cpp</ulink>
      </simpara>
    </listitem>
  </itemizedlist>
</article>
